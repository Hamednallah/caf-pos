package com.yourcompany.cafeteria.dao;
import java.sql.*; import java.util.*; import com.yourcompany.cafeteria.model.Item;
public class ItemsDAO {
  private final Connection conn; public ItemsDAO(Connection c){ this.conn=c; }
  public int insert(Item it) throws SQLException { try (PreparedStatement ps = conn.prepareStatement("INSERT INTO item(name,description,price,category_id,image_path) VALUES (?,?,?,?,?)", Statement.RETURN_GENERATED_KEYS)){ ps.setString(1, it.getName()); ps.setString(2, it.getDescription()); ps.setBigDecimal(3, it.getPrice()); if(it.getCategoryId()==null) ps.setNull(4, Types.INTEGER); else ps.setInt(4, it.getCategoryId()); ps.setString(5, it.getImagePath()); ps.executeUpdate(); try (ResultSet rs = ps.getGeneratedKeys()){ rs.next(); return rs.getInt(1); } } }
  public List<Item> listAll() throws SQLException { List<Item> out = new ArrayList<>(); try (PreparedStatement ps = conn.prepareStatement("SELECT id,name,description,price,category_id,image_path FROM item ORDER BY name"); ResultSet rs = ps.executeQuery()){ while(rs.next()){ Item i = new Item(); i.setId(rs.getInt(1)); i.setName(rs.getString(2)); i.setDescription(rs.getString(3)); i.setPrice(rs.getBigDecimal(4)); i.setCategoryId((Integer)rs.getObject(5)); i.setImagePath(rs.getString(6)); out.add(i);} } return out; }
  public Item findById(int id) throws SQLException { try (PreparedStatement ps = conn.prepareStatement("SELECT id,name,description,price,category_id,image_path FROM item WHERE id=?")){ ps.setInt(1,id); try (ResultSet rs=ps.executeQuery()){ if(rs.next()){ Item i=new Item(); i.setId(rs.getInt(1)); i.setName(rs.getString(2)); i.setDescription(rs.getString(3)); i.setPrice(rs.getBigDecimal(4)); i.setCategoryId((Integer)rs.getObject(5)); i.setImagePath(rs.getString(6)); return i; } } } return null; }
  public void update(Item it) throws SQLException { try (PreparedStatement ps = conn.prepareStatement("UPDATE item SET name=?,description=?,price=?,category_id=?,image_path=? WHERE id=?")){ ps.setString(1,it.getName()); ps.setString(2,it.getDescription()); ps.setBigDecimal(3,it.getPrice()); if(it.getCategoryId()==null) ps.setNull(4, Types.INTEGER); else ps.setInt(4, it.getCategoryId()); ps.setString(5,it.getImagePath()); ps.setInt(6,it.getId()); ps.executeUpdate(); } }
  public void delete(int id) throws SQLException { try (PreparedStatement ps = conn.prepareStatement("DELETE FROM item WHERE id=?")){ ps.setInt(1,id); ps.executeUpdate(); } }
}
